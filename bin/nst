#! /usr/bin/env python

import errno
from optparse import OptionParser
import os
from pprint import pprint
import glob

# try:
#     import nst
# except:
#     pass

import nst

# import nst.farm

def main():
    """
    usage:

    nst --style ../style/034_c.png
    --content ../renders/comp/cv_075_comp_v003_512k.*.png
    --mask ../renders/masks/17f.*.tif
    --opt ../renders/optImage/opt_v001.*.tif
    --out ../renders/output/034c/v001/034c_v001.*.png
    --frames 1038:1048 --iterations 500 --cweights 1.0 --clayers r42
    --slayers r12:r21:r31:r34:r41:r42:r43 --sweights 0.2:0.02:0.02:0.02:0.2:0.02:0.02
    """

    # to do - add cli args for from_content (?)  why looks diff?

    p = OptionParser()
    p.add_option("", "--from-content", dest='from_content', action='store')
    p.add_option("", "--style", dest='style', action='store')
    p.add_option("", "--content", dest='content', action='store')
    p.add_option("", "--mask", dest='mask', action='store')
    p.add_option("", "--opt", dest='opt', action='store')
    p.add_option("", "--out", dest='out', action='store')
    p.add_option("", "--frames", dest='frames', action='store')
    p.add_option("", "--iterations", dest='iterations', action='store')
    p.add_option("", "--clayers", dest='clayers', action='store')
    p.add_option("", "--cweights", dest='cweights', action='store')
    p.add_option("", "--engine", dest='engine', action='store')
    p.add_option("", "--style-scale", dest='style_scale', action='store')
    p.add_option("", "--opt-x", dest='opt_x', action='store')
    p.add_option("", "--opt-y", dest='opt_y', action='store')
    p.add_option("", "--mips", dest='mips', action='store')

    opts, args = p.parse_args()

    from_content = eval(opts.from_content)

    try:
        style_scale = float(opts.style_scale)
    except TypeError:
        style_scale = 1.

    engine = opts.engine

    import json
    mips = json.loads(opts.mips)
    check_outputs(opts.out)
    inputs_to_check = []
    content = opts.content

    if opts.opt:
        inputs_to_check.append(opts.opt)
    if opts.mask:
        inputs_to_check.append(opts.mask)
    if content:
        inputs_to_check.append(opts.content)

    check_inputs(opts.style, inputs_to_check)
    output_dir = os.path.abspath(os.path.join(opts.out, os.path.pardir))

    try:
        os.makedirs(output_dir)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
        pass

    iterations = opts.iterations or 500

    if opts.clayers:
        clayers = opts.clayers.split(':')
    else:
        clayers = ['r41']

    if opts.cweights:
        cweights = [float(x) for x in opts.cweights.split(':')]
    else:
        cweights = [1.0]


    if opts.frames:
        frames = eval_frames(opts.frames)
        for frame in frames:
            # if opts.smasks:
            #     smasks = [x.replace("####", "%04d" % frame) if x else None for x in smasks]
            if content:
                content_ = opts.content.replace("####", "%04d" % frame)
            else:
                content_ = None

            output_image_ = opts.out.replace("####", "%04d" % frame)

            mip_objects = []
            for mip in mips.keys():
                mip_objects.append(nst.StyleMip(float(mip), mips[mip]))
            style_obj = nst.Style(opts.style, mip_objects)

            style_imager = nst.StyleImager(style_obj, content_image=content_, engine=engine)

            style_imager.from_content = from_content
            style_imager.iterations = iterations
            style_imager.log_iterations = 100

            if opts.content:
                style_imager.content_weights = cweights
                style_imager.content_layers = clayers

            style_imager.content_masks = [None]
            style_imager.out = output_image_
            style_imager.style_scale = style_scale
    
            if opts.opt:
                opt_image_ = opts.opt.replace("####", "%04d" % frame)
                style_imager.optimisation_image = opt_image_
    
            style_imager.write_exr(frame=frame)

    else:
        output_image_ = opts.out

        mip_objects = []
        for mip in mips.keys():
            mip_objects.append(nst.StyleMip(float(mip), mips[mip]))
        style_obj = nst.Style(opts.style, mip_objects)

        if content:
            style_imager = nst.StyleImager(style_obj, content_image=opts.content, engine=engine)
            style_imager.content_weights = cweights
            style_imager.content_layers = clayers
            style_imager.content_masks = [None]
        else:
            style_imager = nst.StyleImager(style_obj, engine=engine)
            style_imager.opt_x = 858
            style_imager.opt_y = 858

        style_imager.from_content = from_content
        style_imager.iterations = iterations
        style_imager.log_iterations = 100
        style_imager.out = output_image_
        style_imager.style_scale = style_scale

        if opts.opt:
            style_imager.optimisation_image = opts.opt

        style_imager.write_exr()



def check_inputs(style, inputs):
    assert os.path.isfile(style)

    for i in inputs:
        i = i.replace('####', '*')
        try:
            assert len(glob.glob(i)) > 0
        except:
            print('invalid input:', i)


def check_outputs(output):
    op = os.path
    output_rel_dir = op.relpath(op.join(output, op.pardir))
    if not os.path.isdir(output_rel_dir):
        os.makedirs(output_rel_dir, exist_ok=True)


def eval_frames(frames_list):
    """
    Return a list of all frame numbers to be rendered.
    Step means every nth frame.
    """
    frames = []

    for token1 in frames_list.split(';'):

        # check for individual frames
        try:
            int(token1)
            frames.append(int(token1))

        # check for frame ranges
        except ValueError:
            token2 = token1.split(':')
            if len(token2) != 2:
                continue
            start = token2[0]
            end = token2[1]
            step = 1

            token3 = end.split('%')
            if len(token3) == 2:
                end = token3[0]
                step = token3[1]

            frame_range = []
            for i in range(int(start), int(end)+1):
                frame_range.append(i)
            frames += frame_range[::int(step)]

    # remove any repeated frames
    unique_frames = list(set(frames))
    unique_frames.sort()
    return unique_frames


if __name__ == "__main__":
    main()
    
"""
nst --style ../style/034_c.png --content ../renders/comp/cv_075_comp_v003_512k.####.png --mask ../renders/masks/17f.####.tif --opt ../renders/optImage/opt_v001.####.tif --out ../renders/output/034c/v001/034c_v001.####.png --frames 1038:1048 --iterations 500 --cweights 1.0 --clayers r42 --slayers r12:r21:r31:r34:r41:r42:r43 --sweights 0.2:0.02:0.02:0.02:0.2:0.02:0.02 
"""
