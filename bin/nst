#! /usr/bin/env python

import json
import errno
from optparse import OptionParser
import os
from pprint import pprint
import glob

# try:
#     import nst
# except:
#     pass

import nst

# import nst.farm
#     layer_gradients.append(opt_tensor.grad.clone())
def main():
    """
    usage:

    nst --style ../style/034_c.png
    --content ../renders/comp/cv_075_comp_v003_512k.*.png
    --mask ../renders/masks/17f.*.tif
    --opt ../renders/optImage/opt_v001.*.tif
    --out ../renders/output/034c/v001/034c_v001.*.png
    --frames 1038:1048 --iterations 500 --cweights 1.0 --clayers r42
    --slayers r12:r21:r31:r34:r41:r42:r43 --sweights 0.2:0.02:0.02:0.02:0.2:0.02:0.02
    """

    # to do - add cli args for from_content (?)  why looks diff?

    p = OptionParser()
    p.add_option("", "--from-content", dest='from_content', action='store')
    p.add_option("", "--mask", dest='mask', action='store')
    p.add_option("", "--opt", dest='opt', action='store')
    p.add_option("", "--out", dest='out', action='store')
    p.add_option("", "--frames", dest='frames', action='store')
    p.add_option("", "--iterations", dest='iterations', action='store')
    p.add_option("", "--engine", dest='engine', action='store')
    p.add_option("", "--opt-x", dest='opt_x', action='store')
    p.add_option("", "--opt-y", dest='opt_y', action='store')
    p.add_option("", "--log-iterations", dest='log_iterations', action='store')
    p.add_option("", "--progressive", dest='progressive', action='store')
    p.add_option("", "--zoom_factor", dest='zoom_factor', action='store')
    p.add_option("", "--gauss_scale_factor", dest='gauss_scale_factor', action='store')
    p.add_option("", "--style-rescale", dest='style_rescale', action='store')
    p.add_option("", "--style-zoom", dest='style_zoom', action='store')

    p.add_option("", "--content", dest='content', action='store')
    p.add_option("", "--content-scale", dest='content_scale', action='store')
    p.add_option("", "--clayers", dest='clayers', action='store')
    p.add_option("", "--cweights", dest='cweights', action='store')
    p.add_option("", "--cmips", dest='cmips', action='store')
    p.add_option("", "--cmipweights", dest='cmipweights', action='store')

    p.add_option("", "--style-1", dest='style_1', action='store')
    p.add_option("", "--style-in-mask-1", dest='style_in_mask_1', action='store')
    p.add_option("", "--style-target-map-1", dest='style_target_map_1', action='store')
    p.add_option("", "--slayers-1", dest='slayers_1', action='store')
    p.add_option("", "--sweights-1", dest='sweights_1', action='store')
    p.add_option("", "--smips-1", dest='smips_1', action='store')
    p.add_option("", "--smipweights-1", dest='smipweights_1', action='store')

    p.add_option("", "--style-2", dest='style_2', action='store')
    p.add_option("", "--style-in-mask-2", dest='style_in_mask_2', action='store')
    p.add_option("", "--style-target-map-2", dest='style_target_map_2', action='store')
    p.add_option("", "--slayers-2", dest='slayers_2', action='store')
    p.add_option("", "--sweights-2", dest='sweights_2', action='store')
    p.add_option("", "--smips-2", dest='smips_2', action='store')
    p.add_option("", "--smipweights-2", dest='smipweights_2', action='store')

    opts, args = p.parse_args()

    from_content = eval(opts.from_content)
    progressive = eval(opts.progressive)
    log_iterations = int(opts.log_iterations)

    # retiring this feature as it's pointless:
    # try:
    #     style_scale = float(opts.style_scale)
    # except TypeError:
    #     style_scale = 1.

    engine = opts.engine
    inputs_to_check = []
    content = opts.content

    if opts.opt:
        inputs_to_check.append(opts.opt)
    if opts.mask:
        inputs_to_check.append(opts.mask)
    if content:
        inputs_to_check.append(opts.content)

    check_inputs(opts.style_1, inputs_to_check)

    if opts.zoom_factor:
        zoom_factor = float(opts.zoom_factor)
    else:
        zoom_factor = 0.17

    if opts.gauss_scale_factor:
        gauss_scale_factor = float(opts.gauss_scale_factor)
    else:
        gauss_scale_factor = 0.63

    if opts.clayers:
        clayers = opts.clayers.split(':')
    else:
        clayers = ['r41']

    if opts.cweights:
        cweights = [float(x) for x in opts.cweights.split(':')]
    else:
        cweights = [1.0]

    if opts.cmips:
        cmips = int(opts.cmips)
    else:
        cmips = 1

    if opts.cmipweights:
        content_mip_weights = opts.cmipweights
    else:
        content_mip_weights = [1.0] * cmips

    if opts.opt_x:
        opt_x = int(opts.opt_x)
    else:
        opt_x = 858

    if opts.opt_y:
        opt_y = int(opts.opt_y)
    else:
        opt_y = 858

    if opts.iterations:
        iterations = int(opts.iterations)
    else:
        iterations = 500

    if opts.style_in_mask_1:
        style_in_mask_1 = opts.style_in_mask_1
    else:
        style_in_mask_1 = None

    if opts.style_in_mask_2:
        style_in_mask_2 = opts.style_in_mask_2
    else:
        style_in_mask_2 = None

    slayers_1 = opts.slayers_1.split(':')
    sweights_1 = [float(x) for x in opts.sweights_1.split(':')]
    smips_1 = int(opts.smips_1)
    style_1 = opts.style_1
    style_mip_weights_1 = opts.smipweights_1

    if opts.style_2:
        slayers_2 = opts.slayers_2.split(':')
        sweights_2 = [float(x) for x in opts.sweights_2.split(':')]
        smips_2 = int(opts.smips_2)
        style_2 = opts.style_2
        style_mip_weights_2 = opts.smipweights_2
    else:
        style_2 = None

    if opts.frames:
        frames = eval_frames(opts.frames)
        for frame in frames:
            # if opts.smasks:
            #     smasks = [x.replace("####", "%04d" % frame) if x else None for x in smasks]
            if content:
                content_ = opts.content.replace("####", "%04d" % frame)
            else:
                content_ = None

            output_image_ = opts.out.replace("####", "%04d" % frame)

            style_layers_1 = []
            for index, sl in enumerate(slayers_1):
                mip_weights = style_mip_weights_1.split(':')[index]
                mip_weight = mip_weights.split(',')
                mip_weight = [float(x) for x in mip_weight]
                style_layers_1 += [nst.VGGLayer(sl, weight=sweights_1[index], mip_weights=mip_weight)]
            style_obj_1 = nst.Style(style_1, style_layers_1, mips=smips_1, in_mask=style_in_mask_1)
            if opts.style_target_map_1:
                style_obj_1.target_map = opts.style_target_map_1

            if opts.style_2:
                style_layers_2 = []
                for index, sl in enumerate(slayers_2):
                    mip_weights = style_mip_weights_2.split(':')[index]
                    mip_weight = mip_weights.split(',')
                    mip_weight = [float(x) for x in mip_weight]
                    style_layers_2 += [nst.VGGLayer(sl, weight=sweights_2[index], mip_weights=mip_weight)]
                style_obj_2 = nst.Style(style_2, style_layers_2, mips=smips_2, in_mask=style_in_mask_2)
                if opts.style_target_map_2:
                    style_obj_2.target_map = opts.style_target_map_2

            content_layers = []
            for index, cl in enumerate(clayers):
                mip_weight = content_mip_weights[index].split(',')
                content_layers += [nst.VGGLayer(cl, weight=cweights[index], mip_weights=mip_weight)]
            content_obj = nst.Content(content_, content_layers, mips=cmips)

            style_imager = nst.StyleImager(style_obj_1, style2=style_obj_2, content=content_obj, engine=engine)
            style_imager.from_content = from_content
            style_imager.iterations = iterations
            style_imager.log_iterations = 100
            style_imager.progressive = progressive
            style_imager.log_iterations = log_iterations

            style_imager.content_masks = [None]
            style_imager.out = output_image_

            if opts.style_crop_scale:
                style_imager.style_crop_scale = float(opts.style_crop_scale)

            # style_imager.style_scale = style_scale
    
            if opts.opt:
                opt_image_ = opts.opt.replace("####", "%04d" % frame)
                style_imager.optimisation_image = opt_image_
    
            style_imager.write_exr(frame=frame)

    else:

        style_layers_1 = []
        for index, sl in enumerate(slayers_1):
            mip_weights = style_mip_weights_1.split(':')[index]
            mip_weight = mip_weights.split(',')
            mip_weight = [float(x) for x in mip_weight]
            style_layers_1 += [nst.VGGLayer(sl, weight=sweights_1[index], mip_weights=[float(x) for x in mip_weight])]
        style_obj_1 = nst.Style(style_1, style_layers_1, mips=smips_1, in_mask=style_in_mask_1)
        if opts.style_target_map_1:
            style_obj_1.target_map = opts.style_target_map_1

        if opts.style_2:
            style_layers_2 = []
            for index, sl in enumerate(slayers_2):
                mip_weights = style_mip_weights_2.split(':')[index]
                mip_weight = mip_weights.split(',')
                mip_weight = [float(x) for x in mip_weight]
                style_layers_2 += [nst.VGGLayer(sl, weight=sweights_2[index], mip_weights=[float(x) for x in mip_weight])]
            style_obj_2 = nst.Style(style_2, style_layers_2, mips=smips_2, in_mask=style_in_mask_2)
            if opts.style_target_map_2:
                style_obj_2.target_map = opts.style_target_map_2
        else:
            style_obj_2 = None

        if content:
            content_layers = []
            for index, cl in enumerate(clayers):
                mip_weight = content_mip_weights[index].split(',')
                content_layers += [nst.VGGLayer(cl, weight=cweights[index], mip_weights=mip_weight)]
            content_obj = nst.Content(content, content_layers, mips=cmips)
            style_imager = nst.StyleImager(style_obj_1, style2=style_obj_2, content=content_obj, engine=engine)

        else:
            style_imager = nst.StyleImager(style_obj_1, style2=style_obj_2, engine=engine)
            style_imager.opt_x = opt_x
            style_imager.opt_y = opt_y

        style_imager.from_content = from_content
        style_imager.iterations = iterations
        style_imager.log_iterations = iterations
        style_imager.out = opts.out
        style_imager.progressive = progressive
        style_imager.log_iterations = log_iterations

        style_imager.zoom_factor = zoom_factor
        style_imager.gauss_scale_factor = gauss_scale_factor

        if opts.style_zoom:
            style_imager.style_zoom = float(opts.style_zoom)

        if opts.style_rescale:
            style_imager.style_rescale = float(opts.style_rescale)

        if opts.opt:
            style_imager.optimisation_image = opts.opt

        style_imager.write_exr()


def check_inputs(style, inputs):
    assert os.path.isfile(style)

    for i in inputs:
        i = i.replace('####', '*')
        try:
            assert len(glob.glob(i)) > 0
        except:
            print('invalid input:', i)


def check_outputs(output):
    # op = os.path
    # output_rel_dir = op.relpath(op.join(output, op.pardir))n
    # if not os.path.isdir(output_rel_dir):
    #     os.makedirs(output_rel_dir, exist_ok=True)
    try:
        print(5.2, output)
        os.makedirs(output)
    except:
        print(5.3, output)
        pass


def eval_frames(frames_list):
    """
    Return a list of all frame numbers to be rendered.
    Step means every nth frame.
    """
    frames = []

    for token1 in frames_list.split(';'):

        # check for individual frames
        try:
            int(token1)
            frames.append(int(token1))

        # check for frame ranges
        except ValueError:
            token2 = token1.split(':')
            if len(token2) != 2:
                continue
            start = token2[0]
            end = token2[1]
            step = 1

            token3 = end.split('%')
            if len(token3) == 2:
                end = token3[0]
                step = token3[1]

            frame_range = []
            for i in range(int(start), int(end)+1):
                frame_range.append(i)
            frames += frame_range[::int(step)]

    # remove any repeated frames
    unique_frames = list(set(frames))
    unique_frames.sort()
    return unique_frames


if __name__ == "__main__":
    main()
    
"""
nst --style ../style/034_c.png --content ../renders/comp/cv_075_comp_v003_512k.####.png --mask ../renders/masks/17f.####.tif --opt ../renders/optImage/opt_v001.####.tif --out ../renders/output/034c/v001/034c_v001.####.png --frames 1038:1048 --iterations 500 --cweights 1.0 --clayers r42 --slayers r12:r21:r31:r34:r41:r42:r43 --sweights 0.2:0.02:0.02:0.02:0.2:0.02:0.02 
"""
